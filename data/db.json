{
  "blogPosts": [
    {
      "title": "Must-Know Reusable Module Vs Component In Vue 3 Composition API",
      "body": "<p>As a Vue.js developer, we want to keep our code clean and tidy by creating the optimal amount of reusable code. </p><p>With Composition API, we can absolutely do that by creating reusable JS modules aka hook functions and child components.</p>",
      "tags": [
        "vuejs",
        "js",
        "javascript",
        "frontend"
      ],
      "id": 2
    },
    {
      "title": "Lets Create: A Data Visualization using Svelte",
      "body": "<p>If you haven't heard of Svelte, it is a relatively new JavaScript framework that challenges the norm by shifting the bulk of the work from the browser to the compile/build step.</p><p>In doing that, it brings many benefits, most notably, the ability to ship less code to the browser (as you don't need the entire library like with frameworks such as React or Vue) as well as a bunch more stuff that I won't be talking about in this article as, in my opinion, the main benefit of Svelte is how easy it is to get started and how nice it is to use from a development perspective.</p>",
      "tags": [
        "vuejs",
        "js",
        "javascript",
        "frontend"
      ],
      "id": 3
    },
    {
      "title": "Use Maps More and Objects Less",
      "body": "<p>Objects in JavaScript are awesome. They can do anything! Literallyâ€¦anything.</p>\n\n<p>But, like all things, just because you can do something, doesnâ€™t (necessarily) mean you should.</p>\n\n<pre>\n<code>\n// ðŸš©\nconst mapOfThings = {}\n\nmapOfThings[myThing.id] = myThing\n\ndelete mapOfThings[myThing.id]\n</code>\n</pre>\n\n<p>For instance, if you're using objects in JavaScript to store arbitrary key value pairs where you'll be adding and removing keys frequently, you should really consider using a map instead of a plain object.</p>",
      "tags": [
        "html",
        "css",
        "javascript"
      ],
      "id": 4
    }
  ]
}